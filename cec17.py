# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cec17
else:
    import _cec17

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


INF = _cec17.INF
EPS = _cec17.EPS
E = _cec17.E
PI = _cec17.PI

def sphere_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.sphere_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def ellips_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.ellips_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.bent_cigar_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def discus_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.discus_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.dif_powers_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.rosenbrock_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.schaffer_F7_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def ackley_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.ackley_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.weierstrass_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def griewank_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.griewank_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.schwefel_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.katsuura_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.bi_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.grie_rosen_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.escaffer6_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.step_rastrigin_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def happycat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.happycat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def hgbat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.hgbat_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def sum_diff_pow_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.sum_diff_pow_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def zakharov_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.zakharov_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def levy_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.levy_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def dixon_price_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.dixon_price_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def hf01(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf01(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf02(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf02(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf03(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf03(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf04(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf04(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf05(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf05(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf06(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf06(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf07(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf07(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf08(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf08(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def hf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.hf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def cf01(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf01(arg1, arg2, arg3, arg4, arg5, arg6)

def cf02(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf02(arg1, arg2, arg3, arg4, arg5, arg6)

def cf03(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf03(arg1, arg2, arg3, arg4, arg5, arg6)

def cf04(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf04(arg1, arg2, arg3, arg4, arg5, arg6)

def cf05(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf05(arg1, arg2, arg3, arg4, arg5, arg6)

def cf06(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf06(arg1, arg2, arg3, arg4, arg5, arg6)

def cf07(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf07(arg1, arg2, arg3, arg4, arg5, arg6)

def cf08(arg1, arg2, arg3, arg4, arg5, arg6):
    return _cec17.cf08(arg1, arg2, arg3, arg4, arg5, arg6)

def cf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.cf09(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def cf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _cec17.cf10(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def shiftfunc(arg1, arg2, arg3, arg4):
    return _cec17.shiftfunc(arg1, arg2, arg3, arg4)

def rotatefunc(arg1, arg2, arg3, arg4):
    return _cec17.rotatefunc(arg1, arg2, arg3, arg4)

def sr_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.sr_func(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def asyfunc(arg1, x, arg3, arg4):
    return _cec17.asyfunc(arg1, x, arg3, arg4)

def oszfunc(arg1, arg2, arg3):
    return _cec17.oszfunc(arg1, arg2, arg3)

def cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _cec17.cf_cal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def GetOptimum(func_num):
    return _cec17.GetOptimum(func_num)

def Init(D, func_nums):
    return _cec17.Init(D, func_nums)

def cec17func(x):
    return _cec17.cec17func(x)

def cec17_test_func(x, nx, mx, func_num):
    return _cec17.cec17_test_func(x, nx, mx, func_num)

cvar = _cec17.cvar

